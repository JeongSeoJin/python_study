from random import *
from time import *
import sys

start_with_a = ["atherosclerosis","anticompetitive","autocorrelation","anticholinergic",
# "acclimatization","anthropocentric","agranulocytosis","aluminosilicate","assimilationism",
# "archaebacterium","adenohypophysis","antepenultimate","acetophenetidin","antivivisection",
# "autotransformer",
# "acanthocephalan",
# "anthropopathism",
# "ancylostomiasis",
# "ariboflavinosis",
# "assertivenesses",
# "arteriographies",
# "antispeculation",
# "apolipoproteins",
# "archiepiscopate",
# "anthropophagies",
# "antiabortionist",
# "anticlimactical",
# "antieducationalantiliberalisms",
# "affordabilities",
# "ambisexualities",
# "amorphousnesses",
# "authentications",
# "accessibilities",
# "acculturational",
# "agriculturalist",
# "ambitiousnesses",
# "amphitheatrical",
# "anthropological",
# "antimonarchical",
# "antiquarianisms",
# "antiseparatists",
# "arrondissements",
# "autobiographies",
# "autotransfusion",
# "accountableness",
# "advisablenesses",
# "affectabilitiesantilibertarianantimaterialism",
# "applicabilities",
# "astronautically",
# "attentivenesses",
# "autographically",
# "antidevelopmentantifashionableantishoplifting",
# "apprenticeships",
# "atheroscleroses",
# "authoritatively",
# "automatizations",
# "anthropomorphic",
# "accountantships",
# "aerodynamically",
# 'autoradiography',
# "autotetraploidy",
# "aerosolizations",
# "agribusinessman",
# "algorithmically",
# "anagrammatizing",
# "antiferromagnet",
# "agribusinessmen",
# "anonymousnesses",
# "antisegregation",
# "antituberculous",
# "anthropophagous",
# "antimaterialistantiradicalismsagranulocytoses",
# "azidothymidines",
# "accommodational",
# "adversarinessesatherosclerosis",
# "anticompetitive",
# "autocorrelation",
# "anticholinergic",
# "acclimatization",
# "anthropocentric"
# "agranulocytosis",
# "aluminosilicate",
# "assimilationism",
# "archaebacterium",
# "adenohypophysis",
# "antepenultimate",
# "acetophenetidin",
# "antivivisection",
# "autotransformer",
# "acanthocephalan",
# "anthropopathism",
# "ancylostomiasis",
# "ariboflavinosis",
# "assertivenesses",
# "arteriographies",
# "antispeculation",
# "apolipoproteins",
# "archiepiscopate",
# "anthropophagies",
# "antiabortionist",
# "anticlimactical",
# "antieducationalantiliberalisms",
# "affordabilities",
# "ambisexualities",
# "amorphousnesses",
# "authentications",
# "accessibilities",
# "acculturational",
# "agriculturalist",
# "ambitiousnesses",
# "amphitheatrical",
# "anthropological",
# "antimonarchical",
# "antiquarianisms",
# "antiseparatists",
# "arrondissements",
# "autobiographies",
# "autotransfusion",
# "accountableness",
# "advisablenesses",
# "affectabilitiesantilibertarianantimaterialism",
# "applicabilities",
# "astronautically",
# "attentivenesses",
# "autographically",
# "antidevelopmentantifashionableantishoplifting",
# "apocalyptically",
# "apprenticeships",
# "atheroscleroses",
# "authoritatively",
# "automatizations",
# "anthropomorphic",
# "accountantships",
# "aerodynamically",
# "autoradiography",
# "autotetraploidy",
# "aerosolizations",
# "agribusinessman",
# "algorithmically",
# "anagrammatizing",
# "antiferromagnet",
# "agribusinessmen",
# "anonymousnesses",
# "antituberculous",
# "anthropophagous",
# "antimaterialistantiradicalismsagranulocytoses",
# "azidothymidines",
# "accommodational",
# "adversarinesses",
# "allotetraploids",
# "alphabetization",
# "alternativeness",
# "analyzabilities",
# "aromatherapists",
# "acknowledgments",
# "adenocarcinomas",
# "autotrophically",
# "associationists",
# "archaeopteryxes",
# "allotetraploids",
# "alphabetization",
# "alternativeness",
# "analyzabilities",
# "aromatherapists",
# "acknowledgments",
# "adenocarcinomas",
# "autotrophically",
# "associationists",
"archaeopteryxes"]

def start_a():
    robot_selector = choice(start_with_a)
    sleep(0.5)
    print("="*20)
    print("Robot answer\n>> {}".format(robot_selector))
    start_with_a.remove(robot_selector)
    sleep(0.5)

    if len(start_with_a) == 0:
        print("="*12 + "\n You win!!\n" + "="*12)
        res()
        # restart = input("Try again? [ yes | no ]\n : ")
        # if restart == "yes":
        #     sys.exit()
        # elif restart == "no":
        #     print(" ")
        #     print("="*22 + " Thanks for using this game!" + "="*22)
        #     sys.exit()

def res():
    restart = input("Try again? [ yes | no ]\n : ")
    if restart == "yes":
        # print("\n\n --- Good Bye~~ :) --- \n\n")
        sys.exit()
    elif restart == "no":
        print(" ")
        print("="*22 + " Thanks for using this game!" + "="*22)
        sys.exit()